---
/**
 * Section Component â€“ Order of Importance for Heading and Description Values:
 *
 * 1. **Section Override:**
 *    - Use the values passed directly via the Section props (i.e. the "heading" and "description" props).
 *
 * 2. **Meta Values:**
 *    - If no direct override is provided, load the collection meta file (_meta.mdx, _meta.md, or _meta.json)
 *      and use the "heading" and "description" defined there.
 *
 * 3. **Auto-Fallback:**
 *    - If neither the Section props nor the meta file provide a value, automatically generate a default.
 *      For the heading, this fallback is the collection slug capitalized (e.g., "services" becomes "Services").
 *
 * Extended to support a background media object for background videos and images.
 * If a video is provided, it will be used as the background, with the background image as a poster/fallback.
 * Otherwise, the provided image is optimized using Astro's getImage.
 */
// src/components/Section.astro
import Heading from "./Heading.jsx";
import Button from "./Button.jsx";
import ItemsTemplate from "./ItemsTemplate.astro";
import { getImage } from "astro:assets";
import {
  resolveMetaProps,
  resolveHeading,
  resolveDescription,
  resolveButtonsArray,
  getSectionItems,
  resolveSectionStyles,
  resolveComponent,
} from "@/utils/SectionUtils";
import { capitalize } from "@/utils/ContentUtils";

const {
  collection: collectionName,
  query: queryType,
  component: ItemComponent,
  heading,
  description,
  buttons,
  sectionClass,
  contentClass,
  itemsClass,
  itemClass,
  buttonsSectionClass,
  headingAreaClass,
  backgroundMedia,
  topContentClass = "", // extra classes on the top content wrapper
  itemPlacement = "",  // can be a string or an array of selectors (e.g. "top-content-section")
  slotPlacement = "",  // can be a string or an array of selectors
  childSlotClass = "", // extra classes for the default slot container when not injected in the target container
  ...props
} = Astro.props;

// Convert placement props to arrays for flexible checking.
const itemPlacementArray = Array.isArray(itemPlacement)
  ? itemPlacement
  : itemPlacement
  ? [itemPlacement]
  : [];
const slotPlacementArray = Array.isArray(slotPlacement)
  ? slotPlacement
  : slotPlacement
  ? [slotPlacement]
  : [];

const meta = await resolveMetaProps(collectionName, queryType);
const defaultSection = meta.defaultSection || {};

// Merge style props with defaults.
const {
  finalSectionClass,
  finalContentClass,
  finalItemsClass,
  finalButtonsSectionClass,
} = resolveSectionStyles(
  { sectionClass, contentClass, itemsClass, buttonsSectionClass },
  defaultSection
);

// Merge headingAreaClass from Astro.props with the default.
const finalHeadingAreaClass =
  headingAreaClass || defaultSection.headingAreaClass || "";

// Resolve headings and description.
const finalHeadingArray = resolveHeading(heading, meta.heading, collectionName);
const finalDescription = resolveDescription(description, meta.description);

// Resolve the component to render.
const finalComponent = resolveComponent(ItemComponent, defaultSection.component);

// Fetch dynamic items (if applicable).
let items = [];
const isDynamic = Boolean(collectionName && queryType);
if (isDynamic) {
  items = await getSectionItems(queryType, collectionName, Astro.url.pathname);
  if (items.length === 0) return;
}

const buttonsArray = resolveButtonsArray(
  buttons,
  meta.hasPage,
  collectionName,
  Astro.url.pathname
);
const itemsDefaultHasPage = meta.itemsHasPage ?? false;

let optimizedBackgroundImage = null;
if (backgroundMedia?.image && backgroundMedia.image.src) {
  optimizedBackgroundImage = await getImage({
    src: backgroundMedia.image.src,
    format: "webp",
    quality: 50,
    placeholder: "blur",
  });
}
---

<!-- Outer section: relative for layering -->
<section
  class={`${finalSectionClass} relative w-full ${
    isDynamic ? "py-[var(--spacing-lg)] lg:px-[var(--spacing-md)]" : "lg:px-[var(--spacing-md)]"
  }`}
  data-collection={collectionName}
  {...props}
>
  {backgroundMedia?.video && backgroundMedia.video.src ? (
    <video
      class={`absolute inset-0 z-0 w-full h-full object-cover ${backgroundMedia.video.videoClass || ""}`}
      autoPlay={backgroundMedia.video.autoPlay !== undefined ? backgroundMedia.video.autoPlay : true}
      muted={backgroundMedia.video.muted !== undefined ? backgroundMedia.video.muted : true}
      loop={backgroundMedia.video.loop !== undefined ? backgroundMedia.video.loop : true}
      playsInline={backgroundMedia.video.playsInline !== undefined ? backgroundMedia.video.playsInline : true}
      controls={backgroundMedia.video.controls || false}
      preload={backgroundMedia.video.preload || "metadata"}
      poster={optimizedBackgroundImage ? optimizedBackgroundImage.src : ""}
      aria-hidden="true"
    >
      <source src={backgroundMedia.video.src} type="video/mp4" />
      Your browser does not support the video tag.
    </video>
  ) : (
    optimizedBackgroundImage && (
      <div
        class={`absolute inset-0 z-0 ${backgroundMedia?.image?.imageClass || ""}`}
        style={`background-image: url('${optimizedBackgroundImage.src}');`}
        aria-hidden="true"
      ></div>
    )
  )}
  {backgroundMedia?.overlayClass && (
    <div class={`absolute inset-0 ${backgroundMedia.overlayClass} z-0`} aria-hidden="true"></div>
  )}

  <!-- Content container: holds heading, dynamic items, and the default slot -->
  <div class={`${finalContentClass} content-section relative z-10 w-3/4 ${isDynamic ? "my-[var(--spacing-lg)]" : ""}`}>
    
    <!-- Top Content Section: wrapping the heading area -->
    <div class={`top-content-section ${topContentClass}`}>
      <div class={`section-heading-area ${finalHeadingAreaClass}`}>
        {finalHeadingArray.map((head, i) => {
          const headObj = typeof head === "string" ? { text: head } : head;
          const Tag = headObj.tagName || "h2";
          return (
            <Heading key={i} tagName={Tag} className={headObj.class || ""}>
              {headObj.text}
            </Heading>
          );
        })}
        {finalDescription && (
          <p class={description?.class}>
            {finalDescription}
          </p>
        )}
      </div>

      {/*
        Check the slotPlacement array. If it includes "top-content-section", render the default slot here.
      */}
      {slotPlacementArray.includes("top-content-section") && <slot />}
      
      {/*
        Check the itemPlacement array. If it includes "top-content-section" and the section is dynamic, 
        render dynamic items (with injection slots and buttons) in this container.
      */}
      {itemPlacementArray.includes("top-content-section") && isDynamic && (
        <>
          <slot name="aboveItemsInjection" />
          <ItemsTemplate
            items={items}
            collection={collectionName}
            query={queryType}
            itemsClass={finalItemsClass}
            itemClass={itemClass}
            ItemComponent={finalComponent}
            HasPage={itemsDefaultHasPage}
            pathname={Astro.url.pathname}
          />
          <slot name="belowItemsInjection" />
          <div class={finalButtonsSectionClass}>
            {buttonsArray.length > 0 &&
              buttonsArray.map((btn, index) => {
                const btnDefaults = {
                  text: capitalize(collectionName),
                  link: `/${collectionName}`,
                  class: "",
                  variant: "primary",
                };
                const finalButtonProps = { ...btnDefaults, ...btn };
                return (
                  <Button
                    key={index}
                    href={finalButtonProps.link}
                    className={finalButtonProps.class}
                    ariaLabel={finalButtonProps.text}
                    variant={finalButtonProps.variant}
                  >
                    {finalButtonProps.text}
                  </Button>
                );
              })}
          </div>
        </>
      )}
    </div>

    {/*
      If itemPlacement does not include "top-content-section" and the section is dynamic,
      render dynamic items and buttons in a separate container.
    */}
    {!itemPlacementArray.includes("top-content-section") && isDynamic && (
      <>
        <slot name="aboveItemsInjection" />
        <ItemsTemplate
          items={items}
          collection={collectionName}
          query={queryType}
          itemsClass={finalItemsClass}
          itemClass={itemClass}
          ItemComponent={finalComponent}
          HasPage={itemsDefaultHasPage}
          pathname={Astro.url.pathname}
        />
        <slot name="belowItemsInjection" />
        <div class={finalButtonsSectionClass}>
          {buttonsArray.length > 0 &&
            buttonsArray.map((btn, index) => {
              const btnDefaults = {
                text: capitalize(collectionName),
                link: `/${collectionName}`,
                class: "",
                variant: "primary",
              };
              const finalButtonProps = { ...btnDefaults, ...btn };
              return (
                <Button
                  key={index}
                  href={finalButtonProps.link}
                  className={finalButtonProps.class}
                  ariaLabel={finalButtonProps.text}
                  variant={finalButtonProps.variant}
                >
                  {finalButtonProps.text}
                </Button>
              );
            })}
        </div>
      </>
    )}

    {/*
      For non-dynamic sections, render the default button block if any button exists.
    */}
    {!isDynamic && buttonsArray.length > 0 && (
      <div class={`${finalButtonsSectionClass} order-last`}>
        {buttonsArray.map((btn, index) => {
          const btnDefaults = {
            text: capitalize(collectionName),
            link: `/${collectionName}`,
            class: "",
            variant: "primary",
          };
          const finalButtonProps = { ...btnDefaults, ...btn };
          return (
            <Button
              key={index}
              href={finalButtonProps.link}
              className={finalButtonProps.class}
              ariaLabel={finalButtonProps.text}
              variant={finalButtonProps.variant}
            >
              {finalButtonProps.text}
            </Button>
          );
        })}
      </div>
    )}

    {/*
      Finally, check the slotPlacement array. If it does NOT include "top-content-section",
      then render the default slot in its own container.
      Here you can use flexbox order classes (such as "order-last") as defined in your CSS.
    */}
    {!slotPlacementArray.includes("top-content-section") && (
      <div class={`default-child-slot ${childSlotClass}`}>
        <slot />
      </div>
    )}
  </div>
</section>